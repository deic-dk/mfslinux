#!/bin/bash

########################
### Set variables
########################
SCRIPTDIR=$( dirname -- "$0"; )
. "$SCRIPTDIR/set_params"
########################

$CHROOT $INSTALL_DIR

# Support elasticsearch - see https://stackoverflow.com/questions/51445846/elasticsearch-max-virtual-memory-areas-vm-max-map-count-65530-is-too-low-inc
sysctl -w vm.max_map_count=262144
echo 'vm.max_map_count = 262144' >> /etc/sysctl.conf

# This will be mounted onto /var/lib/postgresql in the db pod
mkdir -p /usr/local/postgresql

# We back it up to sciencedata every night.

cat <<"EOF" > /usr/local/sbin/zenodo_backup.sh
#!/bin/sh
KUBECONFIG=/etc/kubernetes/admin.conf
export KUBECONFIG
/usr/bin/kubectl exec -it `/usr/bin/kubectl get pods  | grep ^db- | awk '{print $1}'` -- gosu postgres pg_dump -c -U zenodo zenodo > /tmp/zenodo.sql
curl --insecure -u cloud: --upload /tmp/zenodo.sql https://10.0.0.13/files/kubefiles/zenodo.sql
EOF

cat <<EOF > /etc/cron.daily/zenodo
/usr/local/sbin/zenodo_backup.sh
EOF

# Cronjob to point zenodo to the lb pod

cat <<"EOF" > /usr/local/sbin/zenodo_host.sh
#!/bin/bash

lbip=`kubectl get services -o wide | grep -E '^lb ' | awk '{print $3}'`

grep "$lbip" /etc/hosts >&/dev/null || sed -i -E "s|^[0-9\.]+\s+(zenodo)|$lbip\t\1|" /etc/hosts
grep "zenodo" /etc/hosts >&/dev/null || echo "$lbip	zenodo" >> /etc/hosts

EOF

cat <<EOF > /etc/cron.hourly/zenodo
/usr/local/sbin/zenodo_host.sh
EOF

# Cronjob to point adminer to the celery pod

cat <<"EOF" > /usr/local/sbin/celery_host.sh
#!/bin/bash

lbip=`kubectl get pods -o wide | grep -E '^blossom-' | awk '{print $6}'`

grep "$lbip" /etc/hosts >&/dev/null || sed -i -E "s|^[0-9\.]+\s+(blossom)|$lbip\t\1|" /etc/hosts
grep "blossom" /etc/hosts >&/dev/null || echo "$lbip	blossom" >> /etc/hosts

EOF

cat <<EOF > /etc/cron.hourly/celery
/usr/local/sbin/celery_host.sh
EOF

# Cronjob to point adminer to the adminer pod

cat <<"EOF" > /usr/local/sbin/adminer_host.sh
#!/bin/bash

lbip=`kubectl get pods -o wide | grep -E '^adminer-' | awk '{print $6}'`

grep "$lbip" /etc/hosts >&/dev/null || sed -i -E "s|^[0-9\.]+\s+(adminer)|$lbip\t\1|" /etc/hosts
grep "adminer" /etc/hosts >&/dev/null || echo "$lbip	adminer" >> /etc/hosts

EOF

cat <<EOF > /etc/cron.hourly/adminer
/usr/local/sbin/adminer_host.sh
EOF

# Cronjob to point mq to the rabbitmq pod

cat <<"EOF" > /usr/local/sbin/rabbit_host.sh
#!/bin/bash

lbip=`kubectl get pods -o wide | grep -E '^mq-' | awk '{print $6}'`

grep "$lbip" /etc/hosts >&/dev/null || sed -i -E "s|^[0-9\.]+\s+(mq)|$lbip\t\1|" /etc/hosts
grep "mq" /etc/hosts >&/dev/null || echo "$lbip	mq" >> /etc/hosts

EOF

cat <<EOF > /etc/cron.hourly/rabbit
/usr/local/sbin/rabbit_host.sh
EOF

chmod +x /usr/local/sbin/zenodo_host.sh /etc/cron.hourly/zenodo /usr/local/sbin/zenodo_backup.sh \
/etc/cron.daily/zenodo /usr/local/sbin/adminer_host.sh /etc/cron.hourly/adminer \
/usr/local/sbin/rabbit_host.sh /etc/cron.hourly/rabbit

# Caddy needs to be able to update root CA
cat <<EOF >> /etc/sudoers.d/caddy
# Caddy needs this to update /usr/local/share/ca-certificates/
caddy	ALL=NOPASSWD:ALL
EOF

mkdir /etc/caddy

cat <<EOF > /etc/caddy/sites/sciencerepository.caddy
########################
### sciencerepository
########################

http://sciencerepository.sciencedata.dk {
	redir https://sciencerepository.dk{uri}
}

http://sciencerepository.dk {
	redir https://sciencerepository.dk{uri}
}

https://sciencerepository.sciencedata.dk {
	redir https://sciencerepository.dk{uri}
}

http://repository.sciencedata.dk {
	redir https://sciencerepository.dk{uri}
}

https://repository.sciencedata.dk {
	redir https://sciencerepository.dk{uri}
}

https://sciencerepository.dk {
	#header content-security-policy "connect-src 'self' https://sciencedata.dk https://*.sciencedata.dk"
	#header -referrer-policy
	#header -x-frame-options
	#header -strict-transport-security
	reverse_proxy {
	transport http {
			tls_insecure_skip_verify
		}
		to https://zenodo
	}
	log {
		output file /var/log/caddy/zenodo.log
	}
}
EOF

cat <<EOF > /etc/caddy/sites/celery.caddy
########################
### adminer
### (for sciencerepository)
########################

https://kube.sciencedata.dk:5443 {
	reverse_proxy {
		to http://blossom:5555
	}
	log {
		output file /var/log/caddy/celery.log
	}
	encode gzip zstd
	php_fastcgi unix//run/php/php7.4-fpm.sock
	@blocked not remote_ip 192.38.111.185 130.225.245.245 87.73.109.19
	respond @blocked "Nope" 403
}
EOF

cat <<EOF > /etc/caddy/sites/adminer.caddy
########################
### adminer
### (for sciencerepository)
########################

https://kube.sciencedata.dk:9443 {
	reverse_proxy {
		to http://adminer:8080
	}
	log {
		output file /var/log/caddy/adminer.log
	}
	encode gzip zstd
	php_fastcgi unix//run/php/php7.4-fpm.sock
	@blocked not remote_ip 192.38.111.185 130.225.245.245 87.73.109.19
	respond @blocked "Nope" 403
}
EOF

cat <<EOF > /etc/caddy/sites/rabbit.caddy
########################
### Rabbit MQ
### (for sciencerepository)
########################

https://kube.sciencedata.dk:8672 {
	reverse_proxy {
		to http://mq:15672
	}
	log {
		output file /var/log/caddy/rabbit.log
	}
	encode gzip zstd
	php_fastcgi unix//run/php/php7.4-fpm.sock
	@blocked not remote_ip 192.38.111.185 130.225.245.245 87.73.109.19
	respond @blocked "Nope" 403
}
EOF

## Fill in user and password, start adminer pod with kubectl apply -f /root/adminer.yaml,
## then visit https://kube.sciencedata.dk:9443
## Alternatively, uncomment nodePort in the yaml, delete and apply and then
## visit https://kube.sciencedata.dk:31000/
## But notice that this URL is accessible from all IPs.

cat <<EOF > /root/adminer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer
spec:
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
      - name: adminer
        image: adminer:4
        env:
        # These are not working and have to be
        # filled in manually in the web interface
        - name: POSTGRES_DB
          value: zenodo
        - name: POSTGRES_USER
          value: zenodo
        - name: POSTGRES_PASSWORD
          value: zenodo
        ports:
        - name: http
          containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: adminer
spec:
  type: NodePort
  selector:
    app: adminer
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      #nodePort: 31000
EOF

touch /var/log/caddy/zenodo.log
touch /var/log/caddy/nbviewer.log
touch /var/log/caddy/adminer.log
touch /var/log/caddy/celery.log
touch /var/log/caddy/caddy.log

chown caddy /var/log/caddy/zenodo.log /var/log/caddy/nbviewer.log /var/log/caddy/adminer.log /var/log/caddy/celery.log /var/log/caddy/caddy.log

# Set up GitHub credentials
atftp $ADMIN_IP -g -r /freebsd/config/private/github_credentials.sh -l github_credentials.sh
. ./github_credentials.sh
rm github_credentials.sh

cat <<EOF > /root/.netrc
machine github.com
login $GITHUB_USERNAME
password $GITHUB_PASSWORD
EOF

# Get the Zenodo YAML files
ls zenodo_deployment >&/dev/null || git clone https://github.com/deic-dk/zenodo_deployment.git

###################
## Fire up the pods
###################

kubectl apply -f zenodo_deployment/zenodo_volumes.yaml
kubectl apply -f zenodo_deployment/zenodo_support_services.yaml
kubectl apply -f zenodo_deployment/zenodo_services.yaml

