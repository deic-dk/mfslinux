#!/bin/bash

########################
### Set variables
########################
SCRIPTDIR=$( dirname -- "$0"; )
. "$SCRIPTDIR/set_params"
########################

########################
### Deploy batch_server
########################

# Write YAML

ls $INSTALL_DIR/root/batch_server.yaml >&/dev/null || \
cat <<EOF > $INSTALL_DIR/root/batch_server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: batch-server
spec:
  selector:
    matchLabels:
      app: batch-server
  template:
    metadata:
      labels:
        app: batch-server
    spec:
      containers:
      - name: batch-server
        image: sciencedata/batch_server
        env:
        - name: USERNAME
          value: 'root'
        - name: SD_UID
          value: 'cloud'
        - name: HOME_SERVER
          value: ''
        - name: PUBLIC_HOME_SERVER
          value: ''
        - name: ONLY_FROM
          value: "10.2.12.1"
        - name: SSL_DN_HEADER
          value: "SSL-Client-DN"
        ports:
        - name: https
          containerPort: 443
      #nodeName: peon152
---
apiVersion: v1
kind: Service
metadata:
  name: batch-server
spec:
  type: NodePort
  selector:
    app: batch-server
  ports:
    - protocol: TCP
      port: 443
      targetPort: 443
EOF

# Deploy the service
$CHROOT $INSTALL_DIR kubectl apply -f batch_server.yaml

# Script and cronjob to point batch to the nbviewer pod
ls $INSTALL_DIR/usr/local/sbin/batch_host.sh >&/dev/null || \
cat <<"EOF" > $INSTALL_DIR/usr/local/sbin/batch_host.sh
#!/bin/bash
#!/bin/bash

lbip=`kubectl get pods -o wide | grep -E '^batch-server-' | awk '{print $6}'`

curl https://sciencedata.dk/my_ca_cert.pem -o /etc/ssl/certs/sciencedata.pem
sciencedata_ca_cert=`openssl x509 -in /etc/ssl/certs/sciencedata.pem -hash | head -1`.0
ln -s sciencedata.pem /etc/ssl/certs/$sciencedata_ca_cert

grep "$lbip" /etc/hosts >&/dev/null || sed -i -E "s|^[0-9\.]+\s+(batch)|$lbip\t\1|" /etc/hosts
grep "batch" /etc/hosts >&/dev/null || echo "$lbip  batch" >> /etc/hosts
EOF

ls $INSTALL_DIR/etc/cron.hourly/batch >&/dev/null || \
cat <<EOF > $INSTALL_DIR/etc/cron.hourly/batch
/usr/local/sbin/batch_host.sh
EOF

chmod +x $INSTALL_DIR/usr/local/sbin/batch_host.sh \
$INSTALL_DIR/etc/cron.hourly/batch

########################
### caddy configuration
########################

# We're assuming a running caddy has already been configured.
ls $INSTALL_DIR/etc/caddy/caddy/sites || mkdir $INSTALL_DIR/etc/caddy/caddy/sites
ls $INSTALL_DIR/etc/caddy/caddy/sites/batch.caddy >&/dev/null || \
cat <<EOF > $INSTALL_DIR/etc/caddy/caddy/sites/batch.caddy

########################
### batch
########################

https://batch.sciencedata.dk:443 {
  reverse_proxy https://batch:443 {
    transport http {
      tls_insecure_skip_verify
    }
    #header_up -SSL-Client-DN
    header_up SSL-Client-DN {http.request.tls.client.subject}
  }
  tls {
    client_auth {
      #mode require_and_verify
      mode request
      trusted_ca_cert_file /etc/ssl/certs/ca-certificates.crt
      trusted_ca_cert_file /etc/ssl/certs/sciencedata.pem
    }
  }
  log {
    output file /var/log/caddy/batch-server.log
  }
  encode gzip zstd
  php_fastcgi unix//run/php/php7.4-fpm.sock
  @blocked not remote_ip 192.38.111.185 130.225.245.245 87.73.109.19 130.226.137.130
  respond @blocked "Nope" 403
}


EOF

