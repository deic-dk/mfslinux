#!/bin/bash

########################
### Set variables
########################
SCRIPTDIR=$( dirname -- "$0"; )
. "$SCRIPTDIR/set_params"
########################

########################
### Deploy batch_server
########################

# Write YAML

ls $INSTALL_DIR/root/batch_server.yaml >&/dev/null || \
cat <<EOF > $INSTALL_DIR/root/batch_server_pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: batch
  labels:
    app: batch
    user: cloud
spec:
  containers:
  - name: batch
    image: sciencedata/batch_server
    env:
    - name: USERNAME
      value: 'root'
    - name: SD_UID
      value: 'cloud'
    - name: HOME_SERVER
      value: ''
    - name: PUBLIC_HOME_SERVER
      value: ''
    - name: ONLY_FROM
      value: "10.2.12.1"
    - name: SSL_DN_HEADER
      value: "SSL-Client-DN"
    - name: TRUSTED_VOS
      value: "https://sciencedata.dk/sites/batch/vos/anyone.txt"
    - name: RTE_URLS
      value: "https://sciencedata.dk/sites/batch/rtes/rtes.xml"
    ports:
    - name: https
      containerPort: 443
  #nodeName: peon152
EOF

# Deploy the service
$CHROOT $INSTALL_DIR kubectl apply -f batch_server_pod.yaml

# Script and cronjob to point batch to the nbviewer pod
ls $INSTALL_DIR/usr/local/sbin/batch_host.sh >&/dev/null || \
cat <<"EOF" > $INSTALL_DIR/usr/local/sbin/batch_host.sh
#!/bin/bash

lbip=`get_containers cloud 2>/dev/null | grep '|batch|' | awk -F \| '{print $4}'`

grep "$lbip" /etc/hosts >&/dev/null || sed -i -E "s|^[0-9\.]+\s+(batch)|$lbip\t\1|" /etc/hosts
grep "batch" /etc/hosts >&/dev/null || echo "$lbip  batch" >> /etc/hosts

EOF

ls $INSTALL_DIR/usr/local/sbin/batch_cert.sh >&/dev/null || \
cat <<"EOF" > $INSTALL_DIR/usr/local/sbin/batch_cert.sh
#!/bin/bash

#curl https://sciencedata.dk/my_ca_cert.pem -o /etc/ssl/certs/sciencedata.pem
#sciencedata_ca_cert=`openssl x509 -in /etc/ssl/certs/sciencedata.pem -hash | head -1`.0
#ln -s sciencedata.pem /etc/ssl/certs/$sciencedata_ca_cert

mkdir /root/batch

kubectl exec -it batch -- ls /root/.getssl/batch.sciencedata.dk/fullchain.crt >& /dev/null && \
kubectl cp batch:/root/.getssl/batch.sciencedata.dk/fullchain.crt /root/batch/fullchain.crt
kubectl exec -it batch -- ls /root/.getssl/batch.sciencedata.dk/batch.sciencedata.dk.key.enc >& /dev/null && \
kubectl cp batch:/root/.getssl/batch.sciencedata.dk/batch.sciencedata.dk.key.enc /root/batch/batch.sciencedata.dk.key.enc

if [ -e "/root/batch/fullchain.crt" ]; then
  if openssl x509 -checkend 192800 -noout -in /root/batch/fullchain.crt; then
    echo "Certificate is good for another two days!"
    
    kubectl exec -it batch -- ls /root/.getssl/batch.sciencedata.dk/fullchain.crt >& /dev/null || \
    kubectl cp /root/batch/fullchain.crt batch:/root/.getssl/batch.sciencedata.dk/fullchain.crt
    
    kubectl exec -it batch -- ls /root/.getssl/batch.sciencedata.dk/batch.sciencedata.dk.key.enc >& /dev/null || \
    kubectl cp /root/batch/batch.sciencedata.dk.key.enc batch:/root/.getssl/batch.sciencedata.dk/batch.sciencedata.dk.key.enc
    
    exit 0
  else
    echo "Certificate has expired or will do so within 24 hours!"
    echo "(or is invalid/not found)"
  fi
fi

kubectl exec -it batch -- bash -c "ls /root/getssl || sed -E -i 's|^CERTIFICATE_FILE *=.*|CERTIFICATE_FILE = /root/.getssl/batch.sciencedata.dk/fullchain.crt|' /etc/gridfactory.conf"
kubectl exec -it batch -- bash -c "ls /root/getssl || sed -E -i 's|^KEY_FILE *=.*|KEY_FILE = /root/.getssl/batch.sciencedata.dk/batch.sciencedata.dk.key.enc|' /etc/gridfactory.conf"
kubectl exec -it batch -- bash -c "ls /root/getssl || curl --silent https://raw.githubusercontent.com/srvrco/getssl/latest/getssl > /root/getssl && chmod 700 /root/getssl"
kubectl exec -it batch -- bash -c "ls /root/.getssl/getssl.cfg || ( mkdir  /root/.getssl && echo \"ACL=/var/www/grid/data/.well-known/acme-challenge\" > /root/.getssl/getssl.cfg && echo \"CA=https://acme-v01.api.letsencrypt.org\" >> /root/.getssl/getssl.cfg )"
kubectl exec -it batch -- bash -c "sed -E -i 's|^ *(CA=\"https://acme-staging-v.*\.api\.letsencrypt\.org\")|#\1|' /root/.getssl/getssl.cfg"
kubectl exec -it batch -- bash -c "sed -E -i 's|^ *#(CA=\"https://acme-v.*\.api\.letsencrypt\.org\")|\1|' /root/.getssl/getssl.cfg"
kubectl exec -it batch -- bash -c "/root/getssl batch.sciencedata.dk"
kubectl exec -it batch -- bash -c "openssl rsa -des3 -in /root/.getssl/batch.sciencedata.dk/batch.sciencedata.dk.key -passin pass: -passout pass:grid > /root/.getssl/batch.sciencedata.dk/batch.sciencedata.dk.key.enc"
kubectl exec -it batch -- bash -c "chmod go+rx /root/; chown -R www-data:www-data /root/.getssl/batch.sciencedata.dk"
kubectl exec -it batch -- bash -c "service spoolmanager restart || service spoolmanager restart"
kubectl exec -it batch -- bash -c "service queuemanager restart || service queuemanager restart"

EOF

ls $INSTALL_DIR/etc/cron.hourly/batch >&/dev/null || \
cat <<EOF > $INSTALL_DIR/etc/cron.hourly/batch_host
/usr/local/sbin/batch_host.sh
EOF

ls $INSTALL_DIR/etc/cron.daily/batch >&/dev/null || \
cat <<EOF > $INSTALL_DIR/etc/cron.daily/batch_cert
/usr/local/sbin/batch_cert.sh
EOF

chmod +x $INSTALL_DIR/usr/local/sbin/batch_host.sh $INSTALL_DIR/usr/local/sbin/batch_cert.sh \
$INSTALL_DIR/etc/cron.daily/batch_host $INSTALL_DIR/etc/cron.daily/batch_cert

########################
### caddy configuration
########################

# We're assuming a running caddy has already been configured.
ls $INSTALL_DIR/etc/caddy/caddy/sites || mkdir $INSTALL_DIR/etc/caddy/caddy/sites
ls $INSTALL_DIR/etc/caddy/caddy/sites/batch.caddy >&/dev/null || \
cat <<EOF > $INSTALL_DIR/etc/caddy/caddy/sites/batch.caddy

########################
### batch
########################

https://batch.sciencedata.dk:443 {
  reverse_proxy https://batch:443 {
    transport http {
      tls_insecure_skip_verify
    }
    #header_up -SSL-Client-DN
    header_up SSL-Client-DN {http.request.tls.client.subject}
  }
  tls {
    client_auth {
      #mode require_and_verify
      mode request
      trusted_ca_cert_file /etc/ssl/certs/ca-certificates.crt
      trusted_ca_cert_file /etc/ssl/certs/sciencedata.pem
    }
  }
  log {
    output file /var/log/caddy/batch-server.log
  }
  encode gzip zstd
  php_fastcgi unix//run/php/php7.4-fpm.sock
  @blocked not remote_ip 192.38.111.185 130.225.245.245 87.73.109.19 130.226.137.130
  respond @blocked "Nope" 403
}

http://batch.sciencedata.dk:80 {
  reverse_proxy http://batch:80 {
    #header_up -SSL-Client-DN
    header_up SSL-Client-DN {http.request.tls.client.subject}
  }
}

EOF

